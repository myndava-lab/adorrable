1) Tailwind setup (colors + theme)

tailwind.config.ts (root)

import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        // Adorrable brand palette
        brand: {
          primary: "#12B76A", // Adorrable green
          secondary: "#8B5CF6", // accent (violet)
          dark: "#0B1220",     // deep navy
          mid: "#101827",      // UI surface
          light: "#F9FAFB"     // light text/surfaces
        }
      },
      boxShadow: {
        card: "0 8px 30px rgba(0,0,0,0.15)"
      },
      borderRadius: {
        "2xl": "1.25rem"
      }
    },
  },
  plugins: [],
};
export default config;


postcss.config.js (root – if you don’t already have it)

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


app/globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Background like Lovable, but with Adorrable brand tint */
body {
  @apply bg-brand-dark text-brand-light;
  background:
    radial-gradient(1200px 600px at 50% -10%, rgba(139, 92, 246, 0.18), transparent 60%),
    radial-gradient(900px 500px at 50% 120%, rgba(18, 183, 106, 0.18), transparent 60%),
    linear-gradient(180deg, #0B1220 0%, #101827 60%, #0B1220 100%);
}

/* glass card */
.card {
  @apply bg-[#0f172a]/70 backdrop-blur-md border border-white/10 shadow-card;
}

2) The page UI

app/page.tsx

"use client";

import Image from "next/image";
import { useState } from "react";

export default function Home() {
  const [text, setText] = useState("");

  return (
    <div className="min-h-screen">
      {/* Top bar */}
      <header className="mx-auto max-w-6xl px-4 sm:px-6 pt-6 flex items-center justify-between">
        {/* Left: Logo */}
        <div className="flex items-center gap-2">
          <span className="inline-flex h-7 w-7 items-center justify-center rounded-lg"
                style={{ background: "linear-gradient(135deg,#FB7185 0%,#F59E0B 40%,#12B76A 100%)" }}>
            {/* small heart */}
            <svg viewBox="0 0 24 24" className="h-4 w-4 text-white">
              <path fill="currentColor" d="M12 21s-6.7-4.2-9.5-7C-0.6 11.1 1 6.8 4.8 6.3c2-.3 3.5.7 4.3 2 0 0 1.2-2.5 4.3-2 3.8.5 5.4 4.8 2.3 7.7C18.7 16.8 12 21 12 21z"/>
            </svg>
          </span>
          <span className="text-xl font-semibold">Adorrable</span>
        </div>

        {/* Right: icons */}
        <nav className="flex items-center gap-3">
          {/* Gift */}
          <IconButton title="Gifts">
            <GiftIcon />
          </IconButton>

          {/* Inbox with red dot */}
          <div className="relative">
            <IconButton title="Inbox">
              <InboxIcon />
            </IconButton>
            <span className="absolute -top-1 -right-1 h-2.5 w-2.5 rounded-full bg-rose-400 ring-2 ring-brand-dark" />
          </div>

          {/* Avatar */}
          <div className="h-8 w-8 rounded-xl bg-brand-secondary/90 text-white grid place-items-center font-bold">
            A
          </div>
        </nav>
      </header>

      {/* Hero */}
      <main className="mx-auto max-w-4xl px-4 sm:px-6 text-center mt-24">
        <h1 className="text-3xl sm:text-5xl font-bold tracking-tight">
          Build something <span className="bg-gradient-to-r from-brand-secondary to-brand-primary bg-clip-text text-transparent">Adorrable</span>
        </h1>
        <p className="mt-4 text-base sm:text-lg text-white/70">
          Create apps and websites by chatting with AI
        </p>

        {/* Chat composer card */}
        <section className="mt-10">
          <div className="card rounded-[28px] p-3 sm:p-4 inline-flex w-full max-w-3xl flex-col gap-3">
            {/* prompt */}
            <div className="rounded-2xl bg-[#0b1220]/60 border border-white/10 p-4 sm:p-5">
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-2">
                  <CircleButton><PlusIcon /></CircleButton>
                  <CircleButton><ImageIcon /></CircleButton>
                  <CircleButton><RefreshIcon /></CircleButton>
                  <div className="relative">
                    <CircleButton><DatabaseIcon /></CircleButton>
                    <svg className="absolute right-1 bottom-1" width="10" height="10" viewBox="0 0 20 20">
                      <path d="M5 7l5 5 5-5" fill="none" stroke="currentColor" strokeWidth="2" className="text-white/40"/>
                    </svg>
                  </div>
                </div>

                <input
                  className="flex-1 bg-transparent outline-none text-white/90 placeholder-white/40 text-base"
                  placeholder="Ask Adorrable to create a web app that…"
                  value={text}
                  onChange={(e) => setText(e.target.value)}
                />

                <CircleButton title="Audio">
                  <MicIcon />
                </CircleButton>
                <button
                  className="ml-1 inline-flex h-10 w-10 items-center justify-center rounded-full bg-brand-primary hover:brightness-110 transition"
                  title="Send"
                >
                  <ArrowUpIcon />
                </button>
              </div>
            </div>

            {/* Tip row (optional) */}
            <div className="px-1 text-left text-xs text-white/40">
              Try: “Create a landing page for a Lagos fashion brand with a product grid”
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}

/* ---------- Reusable tiny UI bits ---------- */
function IconButton({ children, title }: { children: React.ReactNode; title?: string }) {
  return (
    <button title={title}
      className="h-9 w-9 grid place-items-center rounded-xl bg-white/5 hover:bg-white/10 border border-white/10 transition">
      {children}
    </button>
  );
}
function CircleButton({ children, title }: { children: React.ReactNode; title?: string }) {
  return (
    <button title={title}
      className="h-10 w-10 grid place-items-center rounded-full bg-white/5 hover:bg-white/10 border border-white/10 transition">
      {children}
    </button>
  );
}

/* ---------- Minimal inline icons (SVG) ---------- */
function ArrowUpIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white">
      <path fill="currentColor" d="M12 4l6 6h-4v8h-4v-8H6z"/>
    </svg>
  );
}
function MicIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/80">
      <path fill="currentColor" d="M12 14a3 3 0 003-3V6a3 3 0 10-6 0v5a3 3 0 003 3zm5-3a5 5 0 01-10 0H5a7 7 0 0014 0h-2zM11 19h2v3h-2z"/>
    </svg>
  );
}
function PlusIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/80">
      <path fill="currentColor" d="M11 11V6h2v5h5v2h-5v5h-2v-5H6v-2z"/>
    </svg>
  );
}
function ImageIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/80">
      <path fill="currentColor" d="M21 5v14H3V5h18zm-2 2H5v10h14V7zm-2.5 8l-3.5-4.5-2.5 3-1.5-2L6 15h10.5zM9 9a1.5 1.5 0 110-3 1.5 1.5 0 010 3z"/>
    </svg>
  );
}
function RefreshIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/80">
      <path fill="currentColor" d="M17.65 6.35A7.95 7.95 0 0012 4V1L7 6l5 5V7a5 5 0 11-5 5H5a7 7 0 107.75-6.95 7.02 7.02 0 004.9 1.3z"/>
    </svg>
  );
}
function DatabaseIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/80">
      <path fill="currentColor" d="M12 3c4.4 0 8 1.1 8 2.5S16.4 8 12 8 4 6.9 4 5.5 7.6 3 12 3zm8 6v3.5c0 1.4-3.6 2.5-8 2.5s-8-1.1-8-2.5V9c2 1.4 5.3 2 8 2s6-0.6 8-2zm0 6.5V19c0 1.4-3.6 2.5-8 2.5S4 20.4 4 19v-3.5c2 1.4 5.3 2 8 2s6-0.6 8-2z"/>
    </svg>
  );
}
function GiftIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/85">
      <path fill="currentColor" d="M20 7h-2.6A3 3 0 0012 4a3 3 0 00-5.4 3H4v4h1v7a2 2 0 002 2h10a2 2 0 002-2v-7h1V7zM9 6a1 1 0 112 0v1H9V6zm4 0a1 1 0 112 0v1h-2V6zM6 9h5v2H6V9zm7 0h5v2h-5V9zm-7 4h5v6H8a2 2 0 01-2-2v-4zm7 6v-6h5v4a2 2 0 01-2 2h-3z"/>
    </svg>
  );
}
function InboxIcon() {
  return (
    <svg width="18" height="18" viewBox="0 0 24 24" className="text-white/85">
      <path fill="currentColor" d="M4 4h16l-2 10h-4l-2 3-2-3H6L4 4z"/>
    </svg>
  );
}

3) Run it
npm install  # if you changed Tailwind/postcss
npm run dev


You’ll get the Lovable-like layout, but with Adorrable’s brand gradient and green send button. The hero, top bar, and the rounded chat composer match the vibe in your screenshot.
Perfect. Here’s a quick paste guide for the agent:

Create/overwrite files

tailwind.config.ts (root)

postcss.config.js (root, if missing)

app/globals.css

app/page.tsx

Make sure Tailwind is wired

In app/layout.tsx, ensure:

import './globals.css'


In package.json, you should already have tailwindcss + autoprefixer. If not, run:

npm i -D tailwindcss postcss autoprefixer
npx tailwindcss init -p


Start the app

npm run dev


Open the local URL (or your platform’s webview). You should see the Lovable-style UI in Adorrable colors.