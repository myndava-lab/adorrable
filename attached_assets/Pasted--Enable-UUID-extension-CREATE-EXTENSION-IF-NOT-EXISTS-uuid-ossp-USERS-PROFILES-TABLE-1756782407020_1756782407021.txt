

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- USERS PROFILES TABLE
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  display_name TEXT,
  credits INT NOT NULL DEFAULT 4,
  avatar_url TEXT,
  timezone TEXT DEFAULT 'UTC',
  language TEXT DEFAULT 'English',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- CREDITS LOG TABLE
CREATE TABLE IF NOT EXISTS credit_logs (
  id BIGSERIAL PRIMARY KEY,
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  delta INT NOT NULL,                 -- +50 or -1 etc
  reason TEXT NOT NULL,               -- "purchase", "generation", "bonus"
  balance_after INT NOT NULL,
  meta JSONB DEFAULT '{}'::JSONB,     -- store extra info like payment_id, template_id
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- PRICE CONFIGURATION TABLE
CREATE TABLE IF NOT EXISTS price_config (
  id BIGSERIAL PRIMARY KEY,
  package_name TEXT NOT NULL UNIQUE,
  credits INT NOT NULL,
  price_usd DECIMAL(10,2) NOT NULL,
  price_ngn DECIMAL(10,2),
  popular BOOLEAN DEFAULT FALSE,
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- PAYMENT TRANSACTIONS TABLE
CREATE TABLE IF NOT EXISTS payment_transactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  profile_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  package_name TEXT NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  currency TEXT NOT NULL DEFAULT 'USD',
  status TEXT NOT NULL DEFAULT 'pending', -- pending, completed, failed, refunded
  provider TEXT NOT NULL,                 -- paystack, nowpayments, bank_transfer
  provider_reference TEXT,
  provider_response JSONB DEFAULT '{}'::JSONB,
  credits_granted INT DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- HELPFUL INDEXES
CREATE INDEX IF NOT EXISTS credit_logs_profile_id_idx ON credit_logs(profile_id);
CREATE INDEX IF NOT EXISTS credit_logs_created_at_idx ON credit_logs(created_at DESC);
CREATE INDEX IF NOT EXISTS payment_transactions_profile_id_idx ON payment_transactions(profile_id);
CREATE INDEX IF NOT EXISTS payment_transactions_status_idx ON payment_transactions(status);
CREATE INDEX IF NOT EXISTS payment_transactions_provider_ref_idx ON payment_transactions(provider_reference);

-- ROW LEVEL SECURITY (RLS)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE credit_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE price_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE payment_transactions ENABLE ROW LEVEL SECURITY;

-- RLS POLICIES
-- Profiles: users can only see/edit their own profile
CREATE POLICY "Users can view own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Credit logs: users can only see their own logs
CREATE POLICY "Users can view own credit logs" ON credit_logs
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = credit_logs.profile_id 
      AND profiles.id = auth.uid()
    )
  );

-- Price config: everyone can read, only admins can modify
CREATE POLICY "Anyone can view price config" ON price_config
  FOR SELECT USING (active = TRUE);

-- Payment transactions: users can only see their own
CREATE POLICY "Users can view own transactions" ON payment_transactions
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = payment_transactions.profile_id 
      AND profiles.id = auth.uid()
    )
  );

-- FUNCTIONS
-- Function to safely update credits and log the transaction
CREATE OR REPLACE FUNCTION grant_credits_and_log(
  user_id UUID,
  credit_amount INT,
  log_reason TEXT,
  log_meta JSONB DEFAULT '{}'::JSONB
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_balance INT;
  result JSONB;
BEGIN
  -- Update user credits atomically
  UPDATE profiles 
  SET 
    credits = credits + credit_amount,
    updated_at = NOW()
  WHERE id = user_id
  RETURNING credits INTO new_balance;
  
  -- Check if user exists
  IF new_balance IS NULL THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'User not found'
    );
  END IF;
  
  -- Log the credit transaction
  INSERT INTO credit_logs (profile_id, delta, reason, balance_after, meta)
  VALUES (user_id, credit_amount, log_reason, new_balance, log_meta);
  
  -- Return success result
  RETURN jsonb_build_object(
    'success', true,
    'new_balance', new_balance,
    'delta', credit_amount
  );
END;
$$;

-- Function to safely deduct credits
CREATE OR REPLACE FUNCTION deduct_credits_and_log(
  user_id UUID,
  credit_amount INT,
  log_reason TEXT,
  log_meta JSONB DEFAULT '{}'::JSONB
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  current_balance INT;
  new_balance INT;
  result JSONB;
BEGIN
  -- Get current balance
  SELECT credits INTO current_balance
  FROM profiles
  WHERE id = user_id;
  
  -- Check if user exists
  IF current_balance IS NULL THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'User not found'
    );
  END IF;
  
  -- Check if user has enough credits
  IF current_balance < credit_amount THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'Insufficient credits',
      'current_balance', current_balance,
      'required', credit_amount
    );
  END IF;
  
  -- Deduct credits atomically
  UPDATE profiles 
  SET 
    credits = credits - credit_amount,
    updated_at = NOW()
  WHERE id = user_id
  RETURNING credits INTO new_balance;
  
  -- Log the credit transaction
  INSERT INTO credit_logs (profile_id, delta, reason, balance_after, meta)
  VALUES (user_id, -credit_amount, log_reason, new_balance, log_meta);
  
  -- Return success result
  RETURN jsonb_build_object(
    'success', true,
    'new_balance', new_balance,
    'delta', -credit_amount
  );
END;
$$;

-- Insert default price packages
INSERT INTO price_config (package_name, credits, price_usd, price_ngn, popular) VALUES
  ('Starter', 50, 9.99, 15000, false),
  ('Creator', 200, 29.99, 45000, true),
  ('Business', 500, 59.99, 90000, false),
  ('Enterprise', 1000, 99.99, 150000, false)
ON CONFLICT (package_name) DO NOTHING;

-- Update timestamp trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply update triggers
CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_price_config_updated_at BEFORE UPDATE ON price_config
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_payment_transactions_updated_at BEFORE UPDATE ON payment_transactions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

