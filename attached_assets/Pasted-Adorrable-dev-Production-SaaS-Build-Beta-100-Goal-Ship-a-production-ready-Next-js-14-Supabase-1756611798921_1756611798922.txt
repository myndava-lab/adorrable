Adorrable.dev ‚Äî Production SaaS Build (Beta-100) Goal: Ship a production-ready Next.js 14 + Supabase SaaS for 100 beta testers. No demo code, no playground scaffolds, no ‚Äúprototype‚Äù language. Non-negotiables Framework: Next.js 14 (App Router) + TypeScript, Node ‚â• 18.17 DB/Auth: Supabase (Postgres, RLS ON, Auth) Hosting: Vercel (Production) ‚Äî domain: adorrable.dev Env: All secrets read from .env / Vercel env (no hardcoded keys) Quality: ESLint passing, npm run build green, zero type errors (or explicitly ignored in next.config.js as documented) Security: CSP via middleware, no secret leakage in logs, file uploads validated Analytics: behind cookie consent only (Clarity, TikTok) Payments: stubs allowed, but routes must be production-safe and ready to wire to real providers Deliverables (MVP scope) Stable project skeleton package.json with Next 14.2.x, TypeScript 5.4.x, ESLint app/layout.tsx, app/page.tsx, components/InspirationalWidget.tsx middleware.ts with strict CSP .gitignore, tsconfig.json, next.config.js, next-env.d.ts Supabase integration lib/supabaseServer.ts (server client w/ cookies) Health-check route: /api/health ‚Üí { ok: true } Account deletion route: /api/delete-account (requires Bearer token, returns 401 if missing) Payments entry (production-safe stubs) Page: /payments/local with receipt upload (client-side validation) API: /api/payments/local ‚Äî validate input, return success JSON (no secrets logged) Compliance surface Cookie consent (react-cookie-consent) Footer tagline: ‚ÄúAdorrable.dev ‚Äî Made for everyone, with a touch of Africa. üåç‚Äù Minimal legal pages placeholders: /privacy, /refunds (MDX or TSX) Deployment Production deploy to Vercel must complete with Ready status Domain set to adorrable.dev (SSL OK) Acceptance Criteria npm run build succeeds locally and on Vercel Visiting https://adorrable.dev shows the landing copy + footer + cookie banner GET /api/health ‚Üí 200 { ok: true } POST /api/delete-account ‚Üí 401 without token /payments/local form submits and returns { ok: true } (stub) No console CSP violations for current assets No credentials or secrets in repo Do / Don‚Äôt Do Use strong typing, narrow any, small PR-sized commits. Fail closed on envs: throw clear errors if required keys missing. Log only non-sensitive operational info. Don‚Äôt Don‚Äôt label anything ‚Äúprototype‚Äù, ‚Äúdemo‚Äù, or ‚Äúexample‚Äù. Don‚Äôt ship sample keys, seed PII, or disabled RLS. Environment Variables (read only, no hardcoding) NEXT_PUBLIC_SUPABASE_URL NEXT_PUBLIC_SUPABASE_ANON_KEY SUPABASE_SERVICE_ROLE_KEY OPENAI_API_KEY PAYSTACK_PUBLIC_KEY PAYSTACK_SECRET_KEY PAYSTACK_WEBHOOK_SECRET CRYPTO_PRIMARY_API_KEY CRYPTO_PRIMARY_WEBHOOK_SECRET CRYPTO_BACKUP_API_KEY CRYPTO_BACKUP_WEBHOOK_SECRET COMPANY_BILLING_DESCRIPTOR NEXT_PUBLIC_TIKTOK_PIXEL_ID NEXT_PUBLIC_CLARITY_PROJECT_ID CRISP_WEBSITE_ID HCAPTCHA_SITEKEY HCAPTCHA_SECRET ‚úÖ Split-Screen Builder + Thinking Overlay // /app/page.tsx "use client"; import { useState } from "react"; export default function BuilderPage() { const [json, setJson] = useState<string>("{}"); const [thinking, setThinking] = useState(false); async function handleGenerate() { setThinking(true); try { // simulate AI generation request const res = await fetch("/api/generate", { method: "POST", body: json }); const newJson = await res.text(); setJson(newJson); } finally { setThinking(false); } } return ( <div className="flex h-screen"> {/* Left panel = editor */} <div className="w-1/2 p-4 border-r overflow-y-auto"> <h1 className="text-lg font-semibold mb-2">JSON Editor</h1> <textarea className="w-full h-[80vh] border rounded p-2 font-mono text-sm" value={json} onChange={(e) => setJson(e.target.value)} /> <button onClick={handleGenerate} className="mt-2 px-3 py-1 bg-green-600 text-white rounded" > Generate </button> </div> {/* Right panel = preview */} <div className="w-1/2 p-4 overflow-y-auto bg-gray-50 relative"> {thinking && ( <div className="absolute inset-0 flex items-center justify-center bg-white/80 z-10"> <span className="animate-pulse text-gray-600">Thinking‚Ä¶</span> </div> )} <h1 className="text-lg font-semibold mb-2">Preview</h1> <pre className="text-xs bg-white border rounded p-2 overflow-x-auto"> {json} </pre> </div> </div> ); } üëâ This restores: Split-Screen view: Left = JSON editor, Right = preview. Thinking overlay: full white translucent overlay with "Thinking‚Ä¶" while backend is working. Proceed to implement the above in this order: scaffold ‚Üí env checks ‚Üí Supabase util ‚Üí pages/routes ‚Üí CSP ‚Üí deploy. Report progress after each milestone with build output and URLs.