You’ve got duplicate code in app/api/images/upload/route.ts — likely from a bad paste or merge (common signs: two import { NextResponse } ... lines, two export async function POST(...) blocks, or leftover <<<<<<< HEAD markers).

Here’s a clean, drop-in replacement for that file (single import, single POST). It uploads a single file from multipart/form-data to Supabase Storage bucket images/:

// app/api/images/upload/route.ts
import { NextResponse, type NextRequest } from "next/server";
import { supaService } from "@/lib/supabaseService"; // service-role client

export const runtime = "nodejs";

export async function POST(req: NextRequest) {
  try {
    // Expect multipart/form-data with key "file"
    const form = await req.formData();
    const file = form.get("file") as File | null;
    if (!file) {
      return NextResponse.json({ error: "Missing 'file' in form-data" }, { status: 400 });
    }

    // Convert File -> Buffer
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    // Build a unique path: images/{yyyy}/{mm}/{timestamp}-{name}
    const now = new Date();
    const yyyy = now.getUTCFullYear();
    const mm = String(now.getUTCMonth() + 1).padStart(2, "0");
    const safeName = file.name.replace(/[^\w.\-]/g, "_");
    const path = `uploads/${yyyy}/${mm}/${now.getTime()}-${safeName}`;

    // Upload (upsert=false to avoid accidental overwrites)
    const { data, error } = await supaService.storage
      .from("images")
      .upload(path, buffer, { contentType: file.type || "application/octet-stream", upsert: false });

    if (error) {
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    // Public URL (if bucket is public). Otherwise, return the path so client can request a signed URL.
    const { data: pub } = supaService.storage.from("images").getPublicUrl(path);

    return NextResponse.json({
      ok: true,
      path,
      publicUrl: pub?.publicUrl ?? null,
      key: data?.path ?? path,
      type: file.type,
      size: file.size,
    });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "Upload failed" }, { status: 500 });
  }
}

Why your build failed

You had two (or more) import blocks and multiple POST functions in the same file. Next.js route handlers must export only one handler per HTTP method.

This often happens after resolving a merge incorrectly or pasting a second version below the first.

Quick cleanup checklist

Open app/api/images/upload/route.ts and remove:

Any second import { NextResponse ... } line

Any extra export async function POST(...) { ... } blocks

Any merge markers like <<<<<<<, =======, >>>>>>>

Save the single version above.

Rebuild from scratch:

rm -rf .next .next/cache node_modules
npm i
npx next build --no-cache